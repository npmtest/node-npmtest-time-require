{"/home/travis/build/npmtest/node-npmtest-time-require/test.js":"/* istanbul instrument in package npmtest_time_require */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-time-require/lib.npmtest_time_require.js":"/* istanbul instrument in package npmtest_time_require */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_time_require = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_time_require = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-time-require/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-time-require && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_time_require */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_time_require\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_time_require.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_time_require.rollup.js'] =\n            local.assetsDict['/assets.npmtest_time_require.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_time_require.__dirname + '/lib.npmtest_time_require.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-time-require/node_modules/time-require/src/timeRequire.js":"/**\n * timeRequire - measure the time to load all the subsequnt modules by hoocking require() calls\n *\n * @author Ciprian Popa (cyparu)\n * @since 0.0.1\n * @version 0.0.1\n */\n\n\"use strict\";\n\nvar // setup vars\n\t\trequireData = [],\n\t\twrite = process.stdout.write.bind(process.stdout),\n\t\trelative = require(\"path\").relative,\n\t\tcwd = process.cwd(),\n\t\t// require hooker should be first module loaded so all the other requires should count as well\n\t\t/* jshint -W003 */\n\t\thook = require(\"./requireHook\")(_hooker),\n\t\ttable = require(\"text-table\"),\n\t\tdateTime = require(\"date-time\"),\n\t\tprettyMs = require(\"pretty-ms\"),\n\t\tchalk = require(\"chalk\"),\n\t\t// extra locals\n\t\tDEFAULT_COLUMNS = 80,\n\t\tBAR_CHAR = process.platform === \"win32\" ? \"■\" : \"▇\",\n\t\tsorted = hasArg(\"--sorted\") || hasArg(\"--s\"),\n\t\ttreshold = (hasArg(\"--verbose\") || hasArg(\"--V\")) ? 0.0: 0.01, // TODO - configure treshold using CLI ?\n\t\tEXTRA_COLUMNS = sorted ? 24 : 20;\n\nfunction hasArg(arg) {\n\treturn process.argv.indexOf(arg) !== -1;\n}\n\nfunction pad(count, seq) {\n\treturn (count > 1) ? new Array(count).join(seq) : \"\";\n}\n\nfunction log(str) {\n\twrite(str + \"\\n\", \"utf8\");\n}\n\n/**\n * Callback/listener used by requireHook hook to collect all the modules in their loading order\n */\nfunction _hooker(data) {\n\tvar filename = relative(cwd, data.filename);\n\t// use the shortest name\n\tif (filename.length > data.filename) {\n\t\tfilename = data.filename;\n\t}\n\trequireData.push({\n\t\torder: requireData.length, // loading order\n\t\ttime: data.startedIn, // time\n\t\tlabel: data.name + \" (\" + filename + \")\"\n//\t\tname: data.name,\n//\t\tfilename: filename\n\t});\n}\n\nfunction formatTable(tableData, totalTime) {\n\tvar NAME_FILE_REX = /(.+)( \\(.+\\))/,\n\t\t\tmaxColumns = process.stdout.columns || DEFAULT_COLUMNS,\n\t\t\tvalidCount = 0,\n\t\t\tlongestRequire = tableData.reduce(function(acc, data) {\n\t\t\t\tvar avg = data.time / totalTime;\n\t\t\t\tif (avg < treshold) {\n\t\t\t\t\treturn acc;\n\t\t\t\t}\n\t\t\t\tvalidCount++;\n\t\t\t\treturn Math.max(acc, data.label.length);\n\t\t\t}, 0),\n\t\t\tmaxBarWidth = (longestRequire > maxColumns / 2) ? ((maxColumns - EXTRA_COLUMNS) / 2) : (maxColumns - (longestRequire + EXTRA_COLUMNS)),\n\t\t\tprocessedTableData = [],\n\t\t\tcounter, maxOrderChars;\n\n\tfunction shorten(name) {\n\t\tvar nameLength = name.length,\n\t\t\t\tpartLength, start, end;\n\t\tif (name.length < maxBarWidth) {\n\t\t\treturn name;\n\t\t}\n\t\tpartLength = Math.floor((maxBarWidth - 3) / 2);\n\t\tstart = name.substr(0, partLength + 1);\n\t\tend = name.substr(nameLength - partLength);\n\t\treturn start.trim() + \"...\" + end.trim();\n\t}\n\n\tfunction createBar(percentage) {\n\t\tvar rounded = Math.round(percentage * 100);\n\t\treturn ((rounded === 0) ? \"0\" : (pad(Math.ceil(maxBarWidth * percentage) + 1, BAR_CHAR) + \" \" + rounded)) + \"%\";\n\t}\n\n\t// sort the data if needed\n\tif (sorted) {\n\t\ttableData.sort(function(e1, e2) {\n\t\t\treturn e2.time - e1.time;\n\t\t});\n\t}\n\t// initialize the counter\n\tcounter = 1;\n\t// get num ber of chars for padding\n\tmaxOrderChars = tableData.length.toString().length;\n\t// push the header\n\tprocessedTableData.push([\"#\" + (sorted ? \" [order]\" : \"\"), \"module\", \"time\", \"%\"]);\n\ttableData.forEach(function(data) {\n\t\tvar avg = data.time / totalTime,\n\t\t\t\tcounterLabel, label, match;\n\t\t// slect just data over the threshold\n\t\tif (avg >= treshold) {\n\t\t\tcounterLabel = counter++;\n\t\t\t// for sorted collumns show the order loading with padding\n\t\t\tif (sorted) {\n\t\t\t\tcounterLabel += pad(maxOrderChars - data.order.toString().length + 1, \" \") + \" [\" + data.order + \"]\";\n\t\t\t}\n\t\t\tlabel = shorten(data.label);\n\t\t\tmatch = label.match(NAME_FILE_REX);\n\t\t\tif (match) {\n\t\t\t\tlabel = chalk.green(match[1]) + match[2];\n\t\t\t}\n\t\t\tprocessedTableData.push([counterLabel, label, chalk.yellow(prettyMs(data.time)), chalk.blue(createBar(avg))]);\n\t\t}\n\t});\n\n\treturn table(processedTableData, {\n\t\talign: [\"r\", \"l\", \"r\", \"l\"],\n\t\tstringLength: function(str) {\n\t\t\treturn chalk.stripColor(str).length;\n\t\t}\n\t});\n}\n\n// hook process exit to display the report at the end\nprocess.once(\"exit\", function() {\n\tvar startTime = hook.hookedAt,\n\t\t\ttotalTime = Date.now() - startTime.getTime();\n\tlog(\"\\n\\n\" + chalk.underline(\"Start time: \" + chalk.yellow(\"(\" + dateTime(startTime) + \")\") + \" [treshold=\" + (treshold * 100) + \"%\" + (sorted ? \",sorted\" : \"\") + \"]\"));\n\tlog(formatTable(requireData, totalTime));\n\tlog(chalk.bold.blue(\"Total require(): \") + chalk.yellow(requireData.length));\n\tlog(chalk.bold.blue(\"Total time: \") + chalk.yellow(prettyMs(totalTime)));\n});\n","/home/travis/build/npmtest/node-npmtest-time-require/node_modules/time-require/src/requireHook.js":"/**\n * requireHook - module wrapping a function that register require() listener and returns hook/unhook control\n *\n * @author Ciprian Popa (cyparu)\n * @since 0.0.1\n * @version 0.0.1\n */\n\n\"use strict\";\n\nvar Module = require(\"module\").Module,\n\t\t_load = Module._load,\n\t\t_hookedAt, _listener;\n\n/**\n * Module hooker function that will replace Module._load and invoke the _listener with module and timing information\n *\n * @function _hooker\n */\nfunction _hooker(name, parent) {\n\tvar timeIn = Date.now(),\n\t\t\texports = _load.apply(Module, arguments),\n\t\t\ttimeOut = Date.now(),\n\t\t\tmod = parent.children[parent.children.length - 1]; // should be the last loaded children\n\t// call the listener\n\t_listener({\n\t\tname: name,\n\t\tparent: parent,\n\t\tmodule: mod,\n\t\tfilename: mod ? mod.filename : name,\n\t\texports: exports,\n\t\trequiredOn: timeIn,\n\t\tstartedIn: timeOut - timeIn\n\t});\n\treturn exports;\n}\n\n/**\n * Hook Node's require() so the configured callback will be invocked with additional module and time loading information information\n *\n * @param {Function} [listener] - optional listener if\n * @method hook\n */\nfunction _hook(listener) {\n\tif (typeof listener !== \"undefined\") {\n\t\tif (typeof listener !== \"function\") {\n\t\t\tthrow new Error(\"The optional parameter for hook() should be a function but was \" + (typeof listener));\n\t\t}\n\t\t// set the listener\n\t\t_listener = listener;\n\t}\n\t// set the hoocker loader\n\tModule._load = _hooker;\n\t// mark hooked time\n\t_hookedAt = new Date();\n}\n\n/**\n * Unhook Node's require() to the original function\n *\n * @method unhook\n */\nfunction _unhook() {\n\t// set the original loader\n\tModule._load = _load;\n\t// reset hooking time\n\t_hookedAt = undefined;\n}\n\n/**\n * Export a function that set the callback and return hook/unhook control functionality\n *\n * @function\n * @param {Function} listener - require() listener\n * @param {Boolean} [autohook=true] - optional flag telling if the hooking will be started automatically\n * @return hook/unhook control function\n */\nmodule.exports = function(listener, autohook) {\n\tif (typeof listener !== \"function\") {\n\t\tthrow new Error(\"The hooking function should be set\");\n\t}\n\t// set the listener\n\t_listener = listener;\n\t// if autohook (by default),\n\tif (autohook !== false) {\n\t\t_hook();\n\t}\n\treturn {\n\t\thookedAt: _hookedAt,\n\t\thook: _hook,\n\t\tunhook: _unhook\n\t};\n};\n"}